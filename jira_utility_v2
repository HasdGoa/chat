Certainly! Here's an updated version of the Python script that accepts the Jira instance URL, project key, and access/product key from the user:

```python
import subprocess
import requests

def get_jira_tags(jira_url, project_key, access_key):
    version_url = f"{jira_url}/rest/api/2/project/{project_key}/version"
    headers = {"Authorization": f"Basic {access_key}"}
    
    response = requests.get(version_url, headers=headers)
    
    if response.status_code == 200:
        tags = [version['name'] for version in response.json()]
        return tags
    else:
        print(f"Error fetching Jira versions: {response.text}")
        return []

def choose_release_tag(tags):
    print("Choose a release/tag:")
    for idx, tag in enumerate(tags, start=1):
        print(f"{idx}. {tag}")

    while True:
        try:
            choice = int(input("Enter the number corresponding to your choice: "))
            if 1 <= choice <= len(tags):
                return tags[choice - 1]
            else:
                print("Invalid selection. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def validate_commits(release_tag):
    git_command = f"git log --pretty=format:\"%s\" {release_tag}..HEAD"
    commit_messages = subprocess.check_output(git_command, shell=True, text=True).splitlines()

    for commit in commit_messages:
        jira_id = commit.split()[0]
        if jira_id.isupper() and '-' in jira_id:
            jira_url = f"https://your-jira-instance.com/rest/api/2/issue/{jira_id}"
            response = requests.get(jira_url)
            if response.status_code != 200 or response.json().get('key') != jira_id:
                print(f"Commit with invalid JIRA ID: {jira_id}")
                exit(1)

    print(f"All commits have valid JIRA IDs for release {release_tag}")

if __name__ == "__main__":
    jira_url = input("Enter Jira instance URL: ")
    project_key = input("Enter Jira project key: ")
    access_key = input("Enter your Jira access/product key: ")

    tags = get_jira_tags(jira_url, project_key, access_key)
    if not tags:
        print("No tags found. Exiting.")
        exit(1)

    release_tag = choose_release_tag(tags)
    print(f"Selected release/tag: {release_tag}")

    validate_commits(release_tag)
```

Now, the script prompts the user to input the Jira instance URL, project key, and access/product key. Adjust the script further based on your specific needs and security considerations.
